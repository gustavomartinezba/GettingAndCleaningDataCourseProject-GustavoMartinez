t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time() t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
play()
as.list(flags)
nxt()
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
play()
dim(flags)
(head(flags))
str(flags)
summary(flags)
nxt()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
play()
?table
nxy()
nxt()
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?rm
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
rm(x, g)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
matrix(1:4, 2, 2)
m <- matrix(1:4, 2, 2)
solve(m)
m %*% solve(m)
source('~/Data Science JHU/02 R Programming/ProgrammingAssignment2/cachematrix.R')
rm(m)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
> myMatrix_object$set(n2)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
picks <- character()
class(picks)
outcome <- heart attack
num <- 20
outcome <- "heart attack"
dat <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available", stringsAsFactors = FALSE)
columns <- list("heart attack" = c(11), "heart failure" = c(17),
"pneumonia" = c(23))
column <- columns[[outcome]]
sel1 <- dat[which(!is.na(dat[, column])), c(2, 7, column)]
sel1[, 2] <- as.factor(sel1[, 2])
str(columns)
setwd("Data Science JHU/02 R Programming/ProgrammingAssignment3/")
dat <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available", stringsAsFactors = FALSE)
columns <- list("heart attack" = c(11), "heart failure" = c(17),
"pneumonia" = c(23))
column <- columns[[outcome]]
sel1 <- dat[which(!is.na(dat[, column])), c(2, 7, column)]
sel1[, 2] <- as.factor(sel1[, 2])
str(sel1)
states <- levels(sel1$State)
sel2 <- sel1[which(sel1$State == states[1]), ]
if (class(num) != "character" & num > nrow(sel2)) {
picks[i, 1] <- NA
}
if (class(num) != "character" & num > nrow(sel2)) {
picks[1, 1] <- NA
}
if (class(num) != "character" & num > nrow(sel2)) {
picks[1] <- NA
}
picks
sel2 <- sel1[which(sel1$State == states[i]), ]
sel2 <- sel1[which(sel1$State == states[2]), ]
if (class(num) != "character" & num > nrow(sel2)) {
picks[2] <- NA
}
picks
if (num == "worst") {
num <- nrow(sel2)
}
ord <- order(sel2[, 3], sel2[, 1])
picks[i, 1] <- sel2[ord[num], 1]
if (num == "worst") {
num <- nrow(sel2)
}
ord <- order(sel2[, 3], sel2[, 1])
picks[2] <- sel2[ord[num], 1]
picks
source('~/Data Science JHU/02 R Programming/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
outcome <- pneumonia
outcome <- "pneumonia"
num <- worst
num <- "worst"
column <- columns[[outcome]]
sel1 <- dat[which(!is.na(dat[, column])), c(2, 7, column)]
sel1[, 2] <- as.factor(sel1[, 2])
picks <- character()
sel2 <- sel1[which(sel1$State == states[i]), ]
sel2 <- sel1[which(sel1$State == states[1]), ]
head(sel1)
if (class(num) != "character" & num > nrow(sel2)) {
picks[1] <- NA
}
if (num == "worst") {
num <- nrow(sel2)
}
ord <- order(sel2[, 3], sel2[, 1])
picks[i] <- sel2[ord[num], 1]
picks[1] <- sel2[ord[num], 1]
sel2[ord, ]
sel2 <- sel1[which(sel1$State == states[52]), ]
if (class(num) != "character" & num > nrow(sel2)) {
picks[i] <- NA
}
if (num == "worst") {
num <- nrow(sel2)
}
ord <- order(sel2[, 3], sel2[, 1])
picks[52] <- sel2[ord[num], 1]
source('~/Data Science JHU/02 R Programming/ProgrammingAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
best("SC", "heart attack")
source("best.R", "rankhospital.R")
source("best.R")
source("rankhospital.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
rm(list = ls())
setwd(.)
setwd(..)
setwd("..")
setwd("..")
setwd("..")
source("swirl")
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = speed, y = dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
play()
?par
nxt()
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
play()
?points
pch = 0:18
pch
nxt()
plot(cars, pch = 2)
data(mtcars)
play()
dim(mtcars)
str(mtcars)
summary(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(XML)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
con
?readLines
?readline
readLines(con)
?nchar
nchar(readLines(con)[c(10, 20, 30, 100)])
readLines(con[7])
readLines(con)[30]
readLines(con)[100]
swirl()
library(swirl)
swirl()
library(dplyr)
swirl()
install.packages("dplyr")
install.packages("dplyr")
library(swirl)
swirl()
remove.packages("yaml")
install.packages("devtools")
library(devtools)
install_version("yaml", version = 2.1.16)
install_version("yaml", version = "2.1.16")
install_version("yaml" version = "2.1.16")
library(devtools)
install_version("yaml" version = "2.1.16")
install_version("yaml", version = "2.1.16")
library(swirl)
install.packages("yaml")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time
)
-5, 20
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size_ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
play()
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
source('C:/Users/Gustavo/AppData/Local/Temp/RtmpC4us21/chain4.R')
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd(1989 May 17)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
yms(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 24, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hour = 6, minute = 10)
this_moment <- update(this_moment, hours = 6, minutes = 10)
this_moment
?now
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
## Read the files (tables):
source("read_files.R")
setwd("Data Science JHU/03 Getting and Cleaning Data/Getting and Cleaning Data Course Project, Gustavo Martinez/")
## Read the files (tables):
source("read_files.R")
read_files()
## STEP 1: Merge the training and test tables (with activity (y) and subject
## columns included):
merge <- rbind(cbind(y_test, subject_test, x_test),
cbind(y_train, subject_train, x_train))
## STEP 2: Extract only the mean and standard deviation for each measurement:
sel <- grep("mean\\(\\)|std\\(\\)", features$V2)
head(merge[, 3])
head(x_test$V1)
selmerge <- merge[, c(1, 2, sel + 2)]
## STEP 3: Use descriptive names for the activities:
activity_labels$V2 <- tolower(activity_labels$V2)
head(activity_labels)
head(selmerge[, 1])
tail(selmerge[, 1])
selmerge[, 1] <- sapply(selmerge[, 1], function(x) {activity_labels[x, 2]})
head(selmerge[, 1])
tail(selmerge[, 1])
head(names(selmerge))
## STEP 4:
names <- features[sel, 2]
rm(names)
## STEP 4:
feature_names <- features[sel, 2]
names(selmerge) <- c("activity", "subject", feature_names)
head(names(selmerge))
names(selmerge)
?sub
## STEP 4: Label (name) the variables descriptively:
features$V2 <- sub("\\(\\)", "", features$V2)
head(features)
feature_names <- features[sel, 2]
names(selmerge) <- c("activity", "subject", feature_names)
head(names(selmerge))
features$V2 <- sub("_", "", features$V2)
feature_names <- features[sel, 2]
names(selmerge) <- c("activity", "subject", feature_names)
head(names(selmerge))
features$V2 <- sub("-", "", features$V2)
feature_names <- features[sel, 2]
names(selmerge) <- c("activity", "subject", feature_names)
head(names(selmerge))
features$V2 <- gsub("-", "", features$V2)
feature_names <- features[sel, 2]
names(selmerge) <- c("activity", "subject", feature_names)
head(names(selmerge))
features$V2 <- sub("mean", "Mean", features$V2)
features$V2 <- sub("std", "Std", features$V2)
feature_names <- features[sel, 2]
names(selmerge) <- c("activity", "subject", feature_names)
head(names(selmerge))
View(selmerge)
## STEP 5: Create another (tidy) data set with the average of each variable for
## each activity and each subject:
library(dplyr)
?group_by
?summarize_each
sol <- selmerge %>% group_by(activity, subject) %>% summarize_all(mean)
sol
?summarize
sol <- selmerge %>% group_by(activity, subject)
sol <- summarize(sol, mean)
